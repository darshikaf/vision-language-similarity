name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, ray ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  PROJECT_NAME: vision_language_similarity_service
  PROJECT_ALIAS: evaluator
  AWS_REGION: us-east-1
  ECR_REGISTRY: your-account-id.dkr.ecr.us-east-1.amazonaws.com

jobs:
  # Lint and code quality checks
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install ruff
        run: pip install ruff

      - name: Run lint checks
        run: scripts/build.sh run-style-inplace-local

  # Unit tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test environment
        run: |
          export PROJECT_NAME=${{ env.PROJECT_NAME }}
          export PROJECT_ALIAS=${{ env.PROJECT_ALIAS }}
          scripts/build.sh build-base
          scripts/build.sh build-test

      - name: Run unit tests
        run: |
          export PROJECT_NAME=${{ env.PROJECT_NAME }}
          export PROJECT_ALIAS=${{ env.PROJECT_ALIAS }}
          scripts/build.sh run-unit-test-suite

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: test-reports/

  # Integration tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build application
        run: |
          export PROJECT_NAME=${{ env.PROJECT_NAME }}
          export PROJECT_ALIAS=${{ env.PROJECT_ALIAS }}
          scripts/build.sh build-base
          scripts/build.sh build-app
          scripts/build.sh build-test

      - name: Run integration tests
        run: |
          export PROJECT_NAME=${{ env.PROJECT_NAME }}
          export PROJECT_ALIAS=${{ env.PROJECT_ALIAS }}
          scripts/build.sh run-integration-test-suite

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: test-reports/

  # Build and push Docker images (commit-based)
  build-and-push:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push'
    outputs:
      image-tag: ${{ steps.meta.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate image tag
        id: meta
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            IMAGE_TAG="${{ github.ref_name }}"
          else
            IMAGE_TAG="$(git rev-parse --short HEAD)"
          fi
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "full-image=${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        run: |
          export PROJECT_NAME=${{ env.PROJECT_NAME }}
          export PROJECT_ALIAS=${{ env.PROJECT_ALIAS }}
          export CI=true
          
          # Build base image
          scripts/build.sh build-base
          
          # Build and tag application image
          scripts/build.sh build-app
          
          # Tag for ECR
          docker tag local/${{ env.PROJECT_NAME }}:latest ${{ steps.meta.outputs.full-image }}
          
          # Push to ECR
          docker push ${{ steps.meta.outputs.full-image }}
          
          echo "Pushed image: ${{ steps.meta.outputs.full-image }}"

  # Build and push release images
  release-build:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push release image
        run: |
          export PROJECT_NAME=${{ env.PROJECT_NAME }}
          export PROJECT_ALIAS=${{ env.PROJECT_ALIAS }}
          export CI=true
          
          # Build images
          scripts/build.sh build-base
          scripts/build.sh build-app
          
          # Tag with release version and latest
          RELEASE_TAG="${{ github.ref_name }}"
          docker tag local/${{ env.PROJECT_NAME }}:latest ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:$RELEASE_TAG
          docker tag local/${{ env.PROJECT_NAME }}:latest ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:latest
          
          # Push both tags
          docker push ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:$RELEASE_TAG
          docker push ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:latest
          
          echo "Released images:"
          echo "- ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:$RELEASE_TAG"
          echo "- ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:latest"

  # Load testing for releases
  load-tests:
    runs-on: ubuntu-latest
    needs: release-build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Start test service
        run: |
          # TODO: Replace with your deployment target
          # This is a placeholder - you would typically:
          # 1. Deploy the released image to a test environment
          # 2. Wait for service to be ready
          # 3. Run load tests against the deployed service
          
          echo "Starting service with released image..."
          echo "Released image: ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ github.ref_name }}"
          
          # Example: Start local service for testing
          export PROJECT_NAME=${{ env.PROJECT_NAME }}
          export PROJECT_ALIAS=${{ env.PROJECT_ALIAS }}
          
          # Build and start service locally for load testing
          scripts/build.sh build-base
          scripts/build.sh build-app
          
          # Start service in background
          docker run -d -p 8000:8000 --name test-service local/${{ env.PROJECT_NAME }}:latest
          
          # Wait for service to be ready
          timeout 60 bash -c 'until curl -s http://localhost:8000/evaluator/health > /dev/null; do sleep 2; done'

      - name: Run load tests
        run: |
          export PROJECT_NAME=${{ env.PROJECT_NAME }}
          export PROJECT_ALIAS=${{ env.PROJECT_ALIAS }}
          
          # Run CI load tests
          scripts/build.sh load-test-ci

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results-${{ github.ref_name }}
          path: |
            test-reports/
            load_tests/results/

      - name: Clean up
        if: always()
        run: |
          docker stop test-service || true
          docker rm test-service || true

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ needs.build-and-push.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'