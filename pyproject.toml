[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "vision-language-similarity-service"
version = "0.1.0"
description = "Vision-Language similarity evaluation service using OpenCLIP models"
authors = [
    {name = "Vision-Language Team"}
]
license = {text = "MIT"}
requires-python = ">=3.11"
dependencies = [
    # Core FastAPI dependencies
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Existing app dependencies
    "torch>=2.0.0",
    "open_clip_torch>=2.20.0",
    "Pillow>=10.0.0",
    "requests>=2.31.0",
    "tqdm>=4.65.0",
    "psutil>=5.9.0",
    
    # Async dependencies
    "httpx>=0.24.0",  # Async HTTP client
    "aiofiles>=23.0.0",  # Async file operations
    
    # Observability dependencies (following ai-systems-pins compatibility matrix)
    "prometheus-client>=0.22.1",  # Prometheus metrics
    "opentelemetry-api>=1.30.0,<1.31",  # OpenTelemetry API (stable)
    "opentelemetry-sdk>=1.30.0,<1.31",  # OpenTelemetry SDK (stable)
    "opentelemetry-exporter-otlp>=1.30.0,<1.31",  # OTLP exporter (stable)
    "opentelemetry-distro>=0.51b0,<0.52b0",  # OpenTelemetry distribution with auto-instrumentation (beta)
    "opentelemetry-instrumentation-fastapi>=0.51b0,<0.52b0",  # FastAPI auto-instrumentation (beta)
    "opentelemetry-instrumentation-httpx>=0.51b0,<0.52b0",  # HTTPX instrumentation (beta)
    "opentelemetry-semantic-conventions>=0.51b0,<0.52b0",  # Semantic conventions (beta)
    
    # Additional service dependencies
    "python-multipart>=0.0.6",  # For file uploads if needed
    "gunicorn>=21.2.0",  # For production deployment
    
    # Ray Serve dependencies (optional - controlled by USE_RAY_SERVE env var)
    "ray[serve]>=2.30.0",  # Ray Serve for ML model serving
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.24.0",  # For testing FastAPI endpoints
    "ruff>=0.1.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.24.0",
]

[project.scripts]
run-service = "service.main:app"

[tool.ruff]
line-length = 120
extend-exclude = ["app/"]  # Exclude existing app code from ruff checks

[tool.ruff.lint]
select = [
    "I",  # isort
    "E",  # pycodestyle (Errors)
    "W",  # pycodestyle (Warnings)
    "F",  # pyflakes
    "UP", # pyupgrade
    "C90", # maccabe complexity
    "B",  # flake8-bugbear
    "N",  # flake8-naming
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "ARG", # flake8-unused-arguments
    "PL",  # pylint
]

ignore = [
    "PLR2004",  # pylint magic number
    "PLR0913",  # too many arguments
    "ARG001",   # unused positional argument
    "ARG002",   # unused method argument
    "B008",     # Ignore error with FastAPI Depends
    "N999",     # ignore invalid module names
    "COM812",   # conflicts with formatter
]

[tool.ruff.lint.per-file-ignores]
"service/evaluation/routes.py" = ["F401"]  # Allow unused imports in routes
"test_*.py" = ["ARG001", "PLR2004"]  # Allow unused args and magic numbers in tests

[tool.ruff.lint.pylint]
max-statements = 100
max-args = 10

[tool.ruff.lint.isort]
known-first-party = ["service", "app"]
force-sort-within-sections = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--cov=service",
    "--cov-report=html",
    "--cov-report=json",
    "--cov-report=term-missing",
    "--junitxml=test-reports/pytest-junit.xml"
]

[tool.coverage.run]
source = ["service"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Version is managed statically for now

[tool.hatch.build.targets.wheel]
packages = ["service"]